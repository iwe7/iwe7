{"version":3,"file":"lazy-loader.js","sourceRoot":"","sources":["lazy-loader.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAEL,UAAU,EACV,qBAAqB,EACrB,WAAW,EACX,MAAM,EAEP,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,EAAE,EAAc,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7C,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAE1C,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAG1D,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,0BAA0B,EAAE,MAAM,iCAAiC,CAAC;AAE7E,OAAO,KAAK,CAAC,MAAM,YAAY,CAAC;;;AAIhC,MAAM;;;;;;IAKJ,YACU,qBACA,WAED;QAHC,wBAAmB,GAAnB,mBAAmB;QACnB,cAAS,GAAT,SAAS;QAEV,wBAAmB,GAAnB,mBAAmB;;0BAPM,IAAI,GAAG,EAAE;QASzC,IAAI,CAAC,0BAA0B,GAAG,IAAI,0BAA0B,CAC9D,IAAI,CAAC,mBAAmB,CACzB,CAAC;QACF,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC/D,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;SACrD,CAAC,CAAC;KACJ;;;;;;IAEM,IAAI,CAAC,OAAoB,EAAE,IAAsB;QACtD,uBAAM,SAAS,GAAU,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CACrE,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CACzB,CAAC;QACF,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;SACtB;QACD,qBAAI,IAAI,GAAsB,EAAE,CAAC;QACjC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;SACjC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;;;;;;;IAGjB,MAAM,CAAC,QAAgB,EAAE,IAAsB;QACpD,qBAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAChB,IAAI,CAAC,0BAA0B,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAC/D,CAAC,IAAI,CACJ,GAAG,CAAC,GAAG,CAAC,EAAE;YACR,qBAAI,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACnE,MAAM,CAAC,QAAQ,CAAC;SACjB,CAAC,EACF,GAAG,CAAC,QAAQ,CAAC,EAAE;YACb,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;SAChC,CAAC,CACH,CAAC;;;;YAjDL,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YAjBC,qBAAqB;YACrB,WAAW;wCAyBR,MAAM,SAAC,eAAe","sourcesContent":["import {\n  InjectionToken,\n  Injectable,\n  NgModuleFactoryLoader,\n  NgModuleRef,\n  Inject,\n  ViewContainerRef\n} from '@angular/core';\nimport { of, Observable, merge } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { fromPromise } from 'rxjs/observable/fromPromise';\n\nimport { LazyComponentsInterface } from './interface';\nimport { LAZY_COMPONENTS } from './token';\nimport { LazyComponentModuleFactory } from './lazy-component-module-factory';\n\nimport * as _ from 'underscore';\n@Injectable({\n  providedIn: 'root'\n})\nexport class LazyLoaderService {\n  // 组件库\n  components: Map<string, string> = new Map();\n  lazyComponentModuleFactory: LazyComponentModuleFactory;\n\n  constructor(\n    private moduleFactoryLoader: NgModuleFactoryLoader,\n    private moduleRef: NgModuleRef<any>,\n    @Inject(LAZY_COMPONENTS)\n    public lazyComponentConfig: LazyComponentsInterface[]\n  ) {\n    this.lazyComponentModuleFactory = new LazyComponentModuleFactory(\n      this.moduleFactoryLoader\n    );\n    this.lazyComponentConfig = _.flatten(this.lazyComponentConfig);\n    this.lazyComponentConfig.map(res => {\n      this.components.set(res.selector, res.loadChildren);\n    });\n  }\n\n  public init(element: HTMLElement, view: ViewContainerRef): Observable<void> {\n    const selectors: any[] = Array.from(this.components.keys()).filter(s =>\n      element.querySelector(s)\n    );\n    if (!selectors.length) {\n      return of(undefined);\n    }\n    let subs: Observable<any>[] = [];\n    selectors.forEach(s => {\n      subs.push(this.create(s, view));\n    });\n    return merge(...subs);\n  }\n\n  public create(selector: string, view: ViewContainerRef) {\n    let path = this.components.get(selector);\n    return fromPromise(\n      this.lazyComponentModuleFactory.getComponentModuleByPath(path)\n    ).pipe(\n      map(res => {\n        let instance = res.getComponent(selector, this.moduleRef.injector);\n        return instance;\n      }),\n      tap(instance => {\n        view.createComponent(instance);\n      })\n    );\n  }\n}\n"]}