{"version":3,"file":"lazy-component-module-factory.js","sourceRoot":"","sources":["lazy-component-module-factory.ts"],"names":[],"mappings":";;;;AAWA,uBAAM,mBAAmB,GAA0C,IAAI,GAAG,EAAE,CAAC;;;;AAI7E,MAAM;;;;;IAIJ,YAAoB,mBAA0C;QAA1C,wBAAmB,GAAnB,mBAAmB,CAAuB;KAAI;;;;;;IAI1D,IAAI,CACV,IAAY;QAEZ,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,mBAAmB;iBACrB,IAAI,CAAC,IAAI,CAAC;iBACV,IAAI,CAAC,aAAa,CAAC,EAAE;gBACpB,qBAAI,MAAM,GAAG,IAAI,mBAAmB,CAClC,aAAa,CACd,CAAC;gBACF,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBACtC,OAAO,CAAC,MAAM,CAAC,CAAC;aACjB,CAAC;iBACD,KAAK,CAAC,GAAG,CAAC,EAAE;gBACX,MAAM,CAAC,GAAG,CAAC,CAAC;aACb,CAAC,CAAC;SACN,CAAC,CAAC;;;;;;;IAKE,wBAAwB,CAC7B,IAAY;QAEZ,qBAAI,wBAAwB,GAAG,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,OAAO,CAAC,wBAAwB,CAAC,CAAC;aACnC,CAAC,CAAC;SACJ;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxB;;CAEJ;;;;;;;;AAGD,MAAM;;;;IACJ,YAAmB,aAAuD;QAAvD,kBAAa,GAAb,aAAa,CAA0C;KAAI;;;;;;IAE9E,YAAY,CAAC,QAAgB,EAAE,QAAmB;QAChD,uBAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtD,uBAAM,wBAAwB,GAAG,SAAS,CAAC,wBAAwB,CAAC;QACpE,uBAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAChE,MAAM,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;KAClE;CACF","sourcesContent":["import {\n  NgModuleFactoryLoader,\n  NgModuleFactory,\n  Injector,\n  NgModuleRef,\n  Type,\n  ComponentFactory\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LazyComponentModuleBase } from './base';\n\nconst lazyComponentModule: Map<string, LazyComponentModule<any>> = new Map();\n/**\n * 懒加载module factory\n */\nexport class LazyComponentModuleFactory {\n  /**\n   * 构造器\n   */\n  constructor(private moduleFactoryLoader: NgModuleFactoryLoader) {}\n  /**\n   * 加载\n   */\n  private load(\n    path: string\n  ): Promise<LazyComponentModule<LazyComponentModuleBase>> {\n    return new Promise((resolve, reject) => {\n      this.moduleFactoryLoader\n        .load(path)\n        .then(moduleFactory => {\n          let module = new LazyComponentModule<LazyComponentModuleBase>(\n            moduleFactory\n          );\n          lazyComponentModule.set(path, module);\n          resolve(module);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n  /**\n   * 根据路径获取组件module\n   */\n  public getComponentModuleByPath(\n    path: string\n  ): Promise<LazyComponentModule<LazyComponentModuleBase>> {\n    let cacheLazyComponentModule = lazyComponentModule.get(path);\n    if (cacheLazyComponentModule) {\n      return new Promise((resolve, reject) => {\n        resolve(cacheLazyComponentModule);\n      });\n    } else {\n      return this.load(path);\n    }\n  }\n}\n\n// 懒加载module\nexport class LazyComponentModule<T> {\n  constructor(public moduleFactory: NgModuleFactory<LazyComponentModuleBase>) {}\n  // 获取component\n  getComponent(selector: string, injector?: Injector): ComponentFactory<any> {\n    const moduleRef = this.moduleFactory.create(injector);\n    const componentFactoryResolver = moduleRef.componentFactoryResolver;\n    const element = moduleRef.instance.getComponentByName(selector);\n    return componentFactoryResolver.resolveComponentFactory(element);\n  }\n}\n"]}