{"version":3,"file":"host-class.service.js","sourceRoot":"","sources":["host-class.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;;;AAKhE,MAAM;;;;IAsCJ,YAAmB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;wBArClB,EAAE;KAqCoB;;;;;;IAnCzC,eAAe,CAAC,EAAe,EAAE,QAAgB;QAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,CAAC,QAAQ,qBAAQ,QAAQ,CAAE,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjD;KACF;;;;;;;IAEO,WAAW,CACjB,EAAe,EACf,QAAgB,EAChB,QAAmB;QAEnB,GAAG,CAAC,CAAC,uBAAM,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,QAAQ,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aAC7B;SACF;;;;;;;;IAGK,QAAQ,CACd,EAAe,EACf,QAAgB,EAChB,QAAmB;QAEnB,GAAG,CAAC,CAAC,uBAAM,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChB,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC1B;aACF;SACF;;;;YAtCJ,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YAJ+B,QAAQ","sourcesContent":["import { Injectable, Renderer2, Injector } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HostClassService {\n  private classMap = {};\n\n  updateHostClass(el: HTMLElement, classMap: object): void {\n    this.renderer = this.injector.get(Renderer2, null);\n    if (this.renderer) {\n      this.removeClass(el, this.classMap, this.renderer);\n      this.classMap = { ...classMap };\n      this.addClass(el, this.classMap, this.renderer);\n    }\n  }\n\n  private removeClass(\n    el: HTMLElement,\n    classMap: object,\n    renderer: Renderer2\n  ): void {\n    for (const i in classMap) {\n      if (classMap.hasOwnProperty(i)) {\n        renderer.removeClass(el, i);\n      }\n    }\n  }\n\n  private addClass(\n    el: HTMLElement,\n    classMap: object,\n    renderer: Renderer2\n  ): void {\n    for (const i in classMap) {\n      if (classMap.hasOwnProperty(i)) {\n        if (classMap[i]) {\n          renderer.addClass(el, i);\n        }\n      }\n    }\n  }\n  renderer: Renderer2;\n  constructor(public injector: Injector) {}\n}\n"]}