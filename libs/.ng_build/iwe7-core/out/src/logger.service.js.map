{"version":3,"file":"logger.service.js","sourceRoot":"","sources":["logger.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EACL,MAAM,EACN,UAAU,EACV,cAAc,EAId,SAAS,EACV,MAAM,eAAe,CAAC;;;AAKvB,MAAM;;;;IACJ,YAA8C;QAAA,WAAM,GAAN,MAAM;KAAa;;;;;IAEjE,GAAG,CAAC,GAAG,IAAW;QAChB,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACvC;KACF;;;;;IAED,IAAI,CAAC,GAAG,IAAW;QACjB,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACxC;KACF;;;;;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACzC;KACF;;;;;IAED,IAAI,CAAC,GAAG,IAAW;QACjB,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SACvC;KACF;;;;;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/B,uBAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SACtD;KACF;;;YAnCF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;4CAEc,MAAM,SAAC,gBAAgB;;;;;;;;;;;;;;;;;AAkCtC,MAAM;IACJ,MAAM,CAAC,IAAI,CAAC;CACb;AAED,MAAM,CAAC,uBAAM,gBAAgB,GAAG,IAAI,cAAc,CAChD,kBAAkB,EAClB;IACE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,cAAc;CACxB,CACF,CAAC","sourcesContent":["import {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  Provider,\n  SkipSelf,\n  isDevMode\n} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n  constructor(@Inject(IWE7_LOGGER_SHOW) private isShow: boolean) {}\n\n  log(...args: any[]): void {\n    if (isDevMode() && this.isShow) {\n      console.log.apply(console, arguments);\n    }\n  }\n\n  warn(...args: any[]): void {\n    if (isDevMode() && this.isShow) {\n      console.warn.apply(console, arguments);\n    }\n  }\n\n  error(...args: any[]): void {\n    if (isDevMode() && this.isShow) {\n      console.error.apply(console, arguments);\n    }\n  }\n\n  info(...args: any[]): void {\n    if (isDevMode() && this.isShow) {\n      console.log.apply(console, arguments);\n    }\n  }\n\n  debug(...args: any[]): void {\n    if (isDevMode() && this.isShow) {\n      const arrs = Array.prototype.slice.call(arguments);\n      console.log.apply(console, ['[DEBUG]'].concat(arrs));\n    }\n  }\n}\n\nexport function iwe7LoggerShow() {\n  return true;\n}\n\nexport const IWE7_LOGGER_SHOW = new InjectionToken<boolean>(\n  'IWE7_LOGGER_SHOW',\n  {\n    providedIn: 'root',\n    factory: iwe7LoggerShow\n  }\n);\n"]}