{
  "version": 3,
  "file": "iwe7-lazy-load.umd.min.js",
  "sources": [
    "ng://iwe7/lazy-load/out/src/lazy-load.module.ts",
    "ng://iwe7/lazy-load/out/src/token.ts",
    "ng://iwe7/lazy-load/out/src/lazy-component-module-factory.ts",
    "ng://iwe7/lazy-load/out/src/lazy-loader.ts",
    "ng://iwe7/lazy-load/out/src/base.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ROUTES } from '@angular/router';\nimport { LazyComponentsInterface } from './interface';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: []\n})\nexport class Iwe7LazyLoadModule {\n  public static forRoot(\n    lazyComponents: LazyComponentsInterface[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: Iwe7LazyLoadModule,\n      providers: [\n        {\n          provide: ROUTES,\n          useValue: lazyComponents,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport { LazyComponentsInterface } from './interface';\nexport const LAZY_COMPONENTS = new InjectionToken<LazyComponentsInterface[]>(\n  'LAZY_COMPONENTS',\n  {\n    providedIn: 'root',\n    factory: (): LazyComponentsInterface[] => []\n  }\n);\n",
    "import {\n  NgModuleFactoryLoader,\n  NgModuleFactory,\n  Injector,\n  NgModuleRef,\n  Type,\n  ComponentFactory\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LazyComponentModuleBase } from './base';\n\nconst lazyComponentModule: Map<string, LazyComponentModule<any>> = new Map();\n/**\n * 懒加载module factory\n */\nexport class LazyComponentModuleFactory {\n  /**\n   * 构造器\n   */\n  constructor(private moduleFactoryLoader: NgModuleFactoryLoader) {}\n  /**\n   * 加载\n   */\n  private load(\n    path: string\n  ): Promise<LazyComponentModule<LazyComponentModuleBase>> {\n    return new Promise((resolve, reject) => {\n      this.moduleFactoryLoader\n        .load(path)\n        .then(moduleFactory => {\n          let module = new LazyComponentModule<LazyComponentModuleBase>(\n            moduleFactory\n          );\n          lazyComponentModule.set(path, module);\n          resolve(module);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n  /**\n   * 根据路径获取组件module\n   */\n  public getComponentModuleByPath(\n    path: string\n  ): Promise<LazyComponentModule<LazyComponentModuleBase>> {\n    let cacheLazyComponentModule = lazyComponentModule.get(path);\n    if (cacheLazyComponentModule) {\n      return new Promise((resolve, reject) => {\n        resolve(cacheLazyComponentModule);\n      });\n    } else {\n      return this.load(path);\n    }\n  }\n}\n\n// 懒加载module\nexport class LazyComponentModule<T> {\n  constructor(public moduleFactory: NgModuleFactory<LazyComponentModuleBase>) {}\n  // 获取component\n  getComponent(selector: string, injector?: Injector): ComponentFactory<any> {\n    const moduleRef = this.moduleFactory.create(injector);\n    const componentFactoryResolver = moduleRef.componentFactoryResolver;\n    const element = moduleRef.instance.getComponentByName(selector);\n    return componentFactoryResolver.resolveComponentFactory(element);\n  }\n}\n",
    "import {\n  InjectionToken,\n  Injectable,\n  NgModuleFactoryLoader,\n  NgModuleRef,\n  Inject,\n  ViewContainerRef\n} from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\n\nimport { LazyComponentsInterface } from './interface';\nimport { LAZY_COMPONENTS } from './token';\nimport { LazyComponentModuleFactory } from './lazy-component-module-factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LazyLoaderService {\n  // 组件库\n  components: Map<string, string> = new Map();\n  lazyComponentModuleFactory: LazyComponentModuleFactory;\n\n  constructor(\n    private moduleFactoryLoader: NgModuleFactoryLoader,\n    private moduleRef: NgModuleRef<any>,\n    @Inject(LAZY_COMPONENTS)\n    public lazyComponentConfig: LazyComponentsInterface[]\n  ) {\n    this.lazyComponentModuleFactory = new LazyComponentModuleFactory(\n      this.moduleFactoryLoader\n    );\n    this.lazyComponentConfig.map(res => {\n      this.components.set(res.path, res.loadChildren);\n    });\n  }\n\n  init(element: HTMLElement, view: ViewContainerRef): Observable<void> {\n    const selectors: any[] = Array.from(this.components.keys()).filter(s =>\n      element.querySelector(s)\n    );\n    if (!selectors.length) {\n      return of(undefined);\n    }\n    return fromPromise(\n      Promise.all(selectors.map(s => this.create(s, view))).then(\n        result => undefined\n      )\n    );\n  }\n\n  private create(selector: string, view: ViewContainerRef) {\n    let path = this.components.get(selector);\n    return this.lazyComponentModuleFactory\n      .getComponentModuleByPath(path)\n      .then(res => {\n        let instance = res.getComponent(selector, this.moduleRef.injector);\n        view.createComponent(instance);\n      });\n  }\n}\n",
    "import { Type } from '@angular/core';\n// 核心基础\nexport abstract class LazyComponentModuleBase {\n  public abstract getComponentByName(key: string): Type<any>;\n}\n"
  ],
  "names": [
    "Iwe7LazyLoadModule",
    "forRoot",
    "lazyComponents",
    "ngModule",
    "providers",
    "provide",
    "ROUTES",
    "useValue",
    "multi",
    "type",
    "NgModule",
    "args",
    "imports",
    "CommonModule",
    "declarations",
    "LAZY_COMPONENTS",
    "InjectionToken",
    "providedIn",
    "factory",
    "lazyComponentModule",
    "Map",
    "LazyComponentModuleFactory",
    "moduleFactoryLoader",
    "this",
    "prototype",
    "load",
    "path",
    "_this",
    "Promise",
    "resolve",
    "reject",
    "then",
    "moduleFactory",
    "module",
    "LazyComponentModule",
    "set",
    "catch",
    "err",
    "getComponentModuleByPath",
    "cacheLazyComponentModule",
    "get",
    "getComponent",
    "selector",
    "injector",
    "moduleRef",
    "create",
    "componentFactoryResolver",
    "element",
    "instance",
    "getComponentByName",
    "resolveComponentFactory",
    "LazyLoaderService",
    "lazyComponentConfig",
    "components",
    "lazyComponentModuleFactory",
    "map",
    "res",
    "loadChildren",
    "init",
    "view",
    "selectors",
    "Array",
    "from",
    "keys",
    "filter",
    "s",
    "querySelector",
    "length",
    "fromPromise",
    "all",
    "result",
    "undefined",
    "of",
    "createComponent",
    "Injectable",
    "NgModuleFactoryLoader",
    "NgModuleRef",
    "decorators",
    "Inject",
    "LazyComponentModuleBase"
  ],
  "mappings": "2gBAAA,IAAAA,EAAA,WAAA,SAAAA,YAUgBA,EAAhBC,QAAS,SACLC,GAEA,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT,CACEC,QAASC,EAAAA,OACTC,SAAUL,EACVM,OAAO,QAnBjB,iBAKA,CAAAC,KAACC,EAAAA,SAADC,KAAA,CAAU,CACRC,QAAS,CAACC,EAAAA,cACVC,aAAc,OCPhB,IAEaC,EAAkB,IAAIC,EAAAA,eACjC,kBACA,CACEC,WAAY,OACZC,QAAS,WAAiC,MAAA,MCKxCC,EAA6D,IAAIC,IAIvEC,EAAA,WAIE,SAAFA,EAAsBC,GAAAC,KAAtBD,oBAAsBA,EAqCtB,OAjCUD,EAAVG,UAAAC,KAAU,SACNC,GADM,IAAVC,EAAAJ,KAGI,OAAO,IAAIK,QAAQ,SAACC,EAASC,GAC3BH,EAAKL,oBACFG,KAAKC,GACLK,KAAK,SAAAC,GACJ,IAAIC,EAAS,IAAIC,EACfF,GAEFb,EAAoBgB,IAAIT,EAAMO,GAC9BJ,EAAQI,KAETG,SAAM,SAAAC,GACLP,EAAOO,QAORhB,EAATG,UAAAc,yBAAS,SACLZ,GAEA,IAAIa,EAA2BpB,EAAoBqB,IAAId,GACvD,OAAIa,EACK,IAAIX,QAAQ,SAACC,EAASC,GAC3BD,EAAQU,KAGHhB,KAAKE,KAAKC,IAGvBL,EAzCA,GA4CAa,EAAA,WACE,SAAFA,EAAqBF,GAAAT,KAArBS,cAAqBA,EAQrB,OANEE,EAAFV,UAAAiB,aAAE,SAAaC,EAAkBC,GAC7B,IAAMC,EAAYrB,KAAKS,cAAca,OAAOF,GACtCG,EAA2BF,EAAUE,yBACrCC,EAAUH,EAAUI,SAASC,mBAAmBP,GACtD,OAAOI,EAAyBI,wBAAwBH,IAE5Db,EATA,GC3DAiB,EAAA,WAuBE,SAAFA,EACY7B,EACAsB,EAEDQ,GAJT,IAAFzB,EAAAJ,KACYA,KAAZD,oBAAYA,EACAC,KAAZqB,UAAYA,EAEDrB,KAAX6B,oBAAWA,EAPX7B,KAAA8B,WAAoC,IAAIjC,IASpCG,KAAK+B,2BAA6B,IAAIjC,EACpCE,KAAKD,qBAEPC,KAAK6B,oBAAoBG,IAAI,SAAAC,GAC3B7B,EAAK0B,WAAWlB,IAAIqB,EAAI9B,KAAM8B,EAAIC,uBAItCN,EAAF3B,UAAAkC,KAAE,SAAKX,EAAsBY,GAA3B,IAAFhC,EAAAJ,KACUqC,EAAmBC,MAAMC,KAAKvC,KAAK8B,WAAWU,QAAQC,OAAO,SAAAC,GACjE,OAAAlB,EAAQmB,cAAcD,KAExB,OAAKL,EAAUO,OAGRC,EAAAA,YACLxC,QAAQyC,IAAIT,EAAUL,IAAI,SAAAU,GAAK,OAAAtC,EAAKkB,OAAOoB,EAAGN,MAAQ5B,KACpD,SAAAuC,GAAU,OAAAC,aAJLC,EAAAA,GAAGD,YASNpB,EAAV3B,UAAAqB,OAAU,SAAOH,EAAkBiB,GAAzB,IAAVhC,EAAAJ,KACQG,EAAOH,KAAK8B,WAAWb,IAAIE,GAC/B,OAAOnB,KAAK+B,2BACThB,yBAAyBZ,GACzBK,KAAK,SAAAyB,GACJ,IAAIR,EAAWQ,EAAIf,aAAaC,EAAUf,EAAKiB,UAAUD,UACzDgB,EAAKc,gBAAgBzB,QAzD7B,iBAeA,CAAAvC,KAACiE,EAAAA,WAAD/D,KAAA,CAAY,CACVM,WAAY,8CAbd,CAAAR,KAAEkE,EAAAA,uBACF,CAAAlE,KAAEmE,EAAAA,aAsBF,CAAAnE,KAAAoD,MAAAgB,WAAA,CAAA,CAAApE,KAAKqE,EAAAA,OAALnE,KAAA,CAAYI,kLCxBZ,IAAAgE,EAAA"
}
